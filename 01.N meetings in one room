Method:Expected Time Complexity : O(N*LogN)
Expected Auxilliary Space : O(N)

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    static class pair{
        int start;
        int end;
        public pair(int start,int end){
            this.start=start;
            this.end=end;
        }
    }
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        pair arr[]=new pair[n];
        for(int i=0;i<n;i++){
            arr[i]=new pair(start[i],end[i]);
        }
        
        Arrays.sort(arr,(a,b)->(a.end-b.end));
        int li=arr[0].end;
        int cnt=1;
        for(int i=1;i<n;i++){
            if(arr[i].start>li){
                li=arr[i].end;
                cnt++;
            }
        }
        return cnt++;
    }
}
