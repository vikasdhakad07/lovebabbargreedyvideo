Method:Expected Time Complexity: O(nLogn)
Expected Auxiliary Space: O(n)


import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    int n=sc.nextInt();
	    int w=sc.nextInt();
	    int arr[]=new int[n];
	    for(int i=0;i<n;i++){
	        arr[i]=sc.nextInt();
	    }
		System.out.println(fractionalKnapsack(w,arr,n));
	}
	 static double fractionalKnapsack(int W, int arr[], int n) 
    {
        Arrays.sort(arr,(i1,i2)->i2.value*i1.weight-i1.value*i2.weight);
        double res=0.0;
        for(int i=0;i<n;i++){
            if(arr[i].weight<=W){
                res+=arr[i].value;
                W-=arr[i].weight;
            }
            else{
                res+=(double)(arr[i].value)/arr[i].weight*W;
                break;
            }
        }
        return res;
    }
}
